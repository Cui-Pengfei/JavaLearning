目的：
使扩展功能与基础功能解耦，扩展功能只需要新建类即可，无须在原来的代码上修改,
扩展的功能类可以接收父类的对象来构建，

修饰器模式：在IO流中的经典应用：
1.节点流是基础功能，毕竟不管什么流都要从某个数据源读取数据，这是最底层的
2.处理流是扩展功能，处理流内置一个顶级父类的成员变量，用于构造自己的对象，
    处理流本身代表一种或多种功能的扩展，由于内置成员是顶级父类类型的，
    处理流可以接收任何一个兄弟类、子类来构造对象，从而对接收来的这个对象完成基于自身功能的修饰，

同样的道理：在咖啡中的应用
1.Coffee是顶级父类，一般是接口或者抽象类，不能直接创建对象
2.OriginalCoffee是基础功能，任何咖啡都是从原味咖啡开始调味道的
3.Decorator是装饰类的总父类，因为装饰类会有很多共同的特点，此处是模板模式，代码复用高
 （对比IO流内的FilterIn[Out]putStream的作用，不过IO流中的这个类也有自己的装饰功能）

4.AddMilk AddSugar都是装饰类，都有自己的功能，他们从Decorator继承来的Coffer类成员,
    可以接收任何Coffee的实现类，再基于本类功能进行修饰。
    （大白话就是一个coffee可以加糖，加了糖的又可以加奶，然后还可以加糖，以此类推，
        实现功能的排列组合）